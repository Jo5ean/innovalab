<div class="results-slide">
    <div class="background-image"></div>
    <div class="content-overlay">
      <div class="results-container">
        <div class="results-header">
          <div class="header-content">
            <span class="icon-circle">🔍</span>
            <h2>Resultados de consulta</h2>
          </div>
          <button id="close-results" class="close-button" aria-label="Cerrar resultados">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
        
        <div class="student-info">
          <div class="student-avatar">
            <span>👤</span>
          </div>
          <div class="student-details">
            <div class="dni-display" id="dni-display"></div>
            <div class="exams-count" id="exams-count"></div>
          </div>
        </div>
        
        <div class="section-title">
          <div class="section-icon">📝</div>
          <h3>Exámenes programados</h3>
        </div>
        
        <div class="examenes-cards" id="examenes-container">
          <!-- Aquí se mostrarán las tarjetas de exámenes -->
        </div>
        
        <div class="actions">
          <button id="back-to-search" class="back-button">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="button-icon">
              <path d="M10 17.5L2.5 10L10 2.5M2.5 10H17.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            Volver a la búsqueda
          </button>
          <button id="generate-qr" class="qr-button">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="button-icon">
              <path d="M2.5 2.5H8.33333V8.33333H2.5V2.5ZM11.6667 2.5H17.5V8.33333H11.6667V2.5ZM2.5 11.6667H8.33333V17.5H2.5V11.6667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M11.6667 11.6667H14.1667V14.1667H11.6667V11.6667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M14.1667 14.1667H16.6667V16.6667H14.1667V14.1667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M11.6667 16.6667H14.1667V17.5H11.6667V16.6667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M16.6667 11.6667H17.5V14.1667H16.6667V11.6667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            Generar QR
          </button>
        </div>
      </div>
    </div>
    
    <!-- Modal para el código QR -->
    <div id="qr-modal" class="qr-modal">
      <div class="qr-modal-content">
        <div class="qr-modal-header">
          <h3>Código QR Generado</h3>
          <button id="close-qr-modal" class="close-qr-modal">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
        <div class="qr-container" id="qr-container"></div>
        <p class="qr-instructions">Escanea este código para ver tus resultados de exámenes</p>
        <button id="back-from-qr" class="back-from-qr-button">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="button-icon">
            <path d="M10 17.5L2.5 10L10 2.5M2.5 10H17.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Atrás
        </button>
      </div>
    </div>
  </div>
  
  <style>
    .results-slide {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 2000; /* Superior al resto de slides */
      visibility: hidden;
      opacity: 0;
      transition: visibility 0s linear 0.3s, opacity 0.3s ease;
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
    }
    
    .results-slide.active {
      visibility: visible;
      opacity: 1;
      transition-delay: 0s;
    }
    
    .background-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: url('/images/fondo.jpg');
      background-size: cover;
      background-position: center;
      z-index: 0;
      filter: brightness(0.4);
    }
    
    .content-overlay {
      position: relative;
      width: 100%;
      height: 100%;
      z-index: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3vh 20px;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    .results-container {
      background: linear-gradient(135deg, rgba(32, 44, 99, 0.9) 0%, rgba(58, 60, 125, 0.85) 100%);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border-radius: 24px;
      padding: clamp(20px, 4vh, 35px);
      box-shadow: 0 15px 50px -12px rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.1);
      width: 100%;
      max-width: 800px;
      animation: containerIn 0.6s cubic-bezier(0.16, 1, 0.3, 1);
      transform-origin: center;
    }
    
    @keyframes containerIn {
      0% {
        opacity: 0;
        transform: scale(0.94);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    .results-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.15);
      padding-bottom: 18px;
    }
    
    .header-content {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .icon-circle {
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.15);
      width: 40px;
      height: 40px;
      border-radius: 50%;
      font-size: 20px;
    }
    
    .results-header h2 {
      color: white;
      font-size: clamp(1.5rem, 4vw, 1.8rem);
      margin: 0;
      font-weight: 600;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .close-button {
      background: rgba(255, 255, 255, 0.1);
      border: none;
      border-radius: 50%;
      color: white;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .close-button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: rotate(90deg);
    }
    
    .student-info {
      background: linear-gradient(to right, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
      border-radius: 16px;
      padding: 20px;
      margin-bottom: 28px;
      color: white;
      display: flex;
      align-items: flex-start;
      gap: 18px;
      box-shadow: inset 0 1px 1px rgba(255, 255, 255, 0.1);
    }
    
    .student-avatar {
      background: rgba(255, 255, 255, 0.2);
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      flex-shrink: 0;
    }
    
    .student-details {
      flex: 1;
    }
    
    .dni-display {
      font-size: 1.3rem;
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .exams-count {
      font-size: 0.95rem;
      opacity: 0.8;
    }
    
    .section-title {
      display: flex;
      align-items: center;
      margin-bottom: 16px;
      gap: 10px;
    }
    
    .section-icon {
      font-size: 22px;
    }
    
    .section-title h3 {
      margin: 0;
      color: white;
      font-size: 1.2rem;
      font-weight: 500;
    }
    
    .examenes-cards {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 18px;
      width: 100%;
      margin-bottom: 28px;
    }
    
    .examen-card {
      background-color: #fff;
      border-radius: 16px;
      box-shadow: 0 8px 25px -5px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      transition: all 0.3s ease;
      height: 100%;
      display: flex;
      flex-direction: column;
      animation: cardIn 0.6s cubic-bezier(0.16, 1, 0.3, 1);
      animation-fill-mode: both;
    }
    
    @keyframes cardIn {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .examen-card:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 12px 30px -8px rgba(0, 0, 0, 0.15);
    }
    
    .examen-header {
      background: linear-gradient(120deg, #e13e3e, #ff6358);
      color: white;
      padding: 18px;
      position: relative;
      overflow: hidden;
    }
    
    .examen-header h3 {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 700;
      position: relative;
      z-index: 1;
      letter-spacing: 0.5px;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
    
    .examen-header::before {
      content: '';
      position: absolute;
      top: -10px;
      right: -10px;
      width: 70px;
      height: 70px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
    }
    
    .examen-details {
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 15px;
      flex: 1;
      background-color: #f9f9f9;
    }
    
    .examen-detail {
      display: flex;
      gap: 12px;
      align-items: center;
      font-size: 1rem;
      color: #333;
      border-left: 3px solid rgba(225, 62, 62, 0.3);
      padding-left: 10px;
    }
    
    .detail-icon {
      color: #e13e3e;
      font-size: 1.2rem;
      width: 24px;
      text-align: center;
      opacity: 0.9;
    }
    
    .actions {
      display: flex;
      gap: 15px;
      margin-top: 10px;
    }
    
    .back-button, .qr-button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      border: none;
      border-radius: 50px;
      padding: 12px 24px;
      font-size: 0.95rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .back-button {
      background-color: #e13e3e;
      color: white;
      flex: 3;
    }
    
    .qr-button {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.2);
      flex: 2;
    }
    
    .back-button:hover {
      background-color: #ee5e58;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(225, 62, 62, 0.3);
    }
    
    .qr-button:hover {
      background-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }
    
    .button-icon {
      stroke: currentColor;
    }
    
    /* Asegurar que las animaciones sean presentadas correctamente */
    .examenes-cards .examen-card:nth-child(1) {
      animation-delay: 0.1s;
    }
    .examenes-cards .examen-card:nth-child(2) {
      animation-delay: 0.2s;
    }
    .examenes-cards .examen-card:nth-child(3) {
      animation-delay: 0.3s;
    }
    .examenes-cards .examen-card:nth-child(4) {
      animation-delay: 0.4s;
    }
    
    /* Estilos para el modal de QR */
    .qr-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(5px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 3000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    .qr-modal.active {
      opacity: 1;
      visibility: visible;
    }
    
    .qr-modal-content {
      background-color: white;
      border-radius: 20px;
      padding: 25px;
      width: 100%;
      max-width: 400px;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
      text-align: center;
      transform: scale(0.9);
      transition: transform 0.3s ease;
    }
    
    .qr-modal.active .qr-modal-content {
      transform: scale(1);
    }
    
    .qr-modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
    }
    
    .qr-modal-header h3 {
      margin: 0;
      color: #333;
      font-size: 1.3rem;
    }
    
    .close-qr-modal {
      background: none;
      border: none;
      color: #777;
      cursor: pointer;
      transition: all 0.2s;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .close-qr-modal:hover {
      background-color: #f5f5f5;
      color: #e13e3e;
    }
    
    .qr-container {
      margin: 15px auto;
      padding: 15px;
      background-color: white;
      border-radius: 10px;
      width: 200px;
      height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }
    
    .qr-instructions {
      color: #666;
      margin: 15px 0 20px;
      font-size: 0.9rem;
      line-height: 1.4;
    }
    
    .back-from-qr-button {
      background-color: #e13e3e;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 12px 30px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      margin: 0 auto;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(225, 62, 62, 0.2);
    }
    
    .back-from-qr-button:hover {
      background-color: #ee5e58;
      transform: translateY(-2px);
      box-shadow: 0 6px 18px rgba(225, 62, 62, 0.3);
    }
    
    /* Media queries para diferentes tamaños de pantalla */
    @media (max-width: 1024px) {
      .examenes-cards {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .content-overlay {
        padding: 2vh 15px;
        align-items: flex-start;
      }
      
      .results-container {
        margin-top: 2vh;
        margin-bottom: 2vh;
      }
    }
    
    @media (max-width: 768px) {
      .results-container {
        padding: 20px;
        border-radius: 20px;
        max-width: 95%;
      }
      
      .examenes-cards {
        grid-template-columns: 1fr;
      }
      
      .student-info {
        flex-direction: column;
        text-align: center;
        gap: 12px;
      }
      
      .actions {
        flex-direction: column;
      }
      
      .back-button, .qr-button {
        width: 100%;
      }
      
      .qr-modal-content {
        width: 90%;
        padding: 20px;
      }
      
      .results-header h2 {
        font-size: 1.3rem;
      }
      
      .dni-display {
        font-size: 1.1rem;
      }
    }
    
    @media (max-width: 480px) {
      .results-container {
        padding: 16px;
        border-radius: 16px;
        max-width: 100%;
      }
      
      .header-content {
        gap: 8px;
      }
      
      .icon-circle {
        width: 32px;
        height: 32px;
        font-size: 16px;
      }
      
      .results-header h2 {
        font-size: 1.1rem;
      }
      
      .student-avatar {
        width: 50px;
        height: 50px;
        font-size: 24px;
      }
      
      .examen-card {
        transform: none !important;
      }
      
      .examen-card:hover {
        transform: translateY(-2px) !important;
      }
      
      .qr-container {
        width: 180px;
        height: 180px;
      }
      
      .content-overlay {
        padding: 10px;
        justify-content: flex-start;
      }
    }
    
    @media (max-height: 700px) {
      .content-overlay {
        justify-content: flex-start;
        padding-top: 15px;
      }
      
      .results-container {
        margin-top: 0;
      }
      
      .results-header {
        margin-bottom: 15px;
        padding-bottom: 12px;
      }
      
      .student-info {
        margin-bottom: 15px;
        padding: 15px;
      }
      
      .examenes-cards {
        margin-bottom: 15px;
      }
    }
    
    /* Ajuste para dispositivos con pantalla táctil */
    @media (pointer: coarse) {
      .card-button, .back-button, .qr-button {
        cursor: pointer;
      }
      
      .examen-card {
        /* Mejora el comportamiento de tap en dispositivos táctiles */
        -webkit-tap-highlight-color: transparent;
      }
    }
    
    .info-icon {
      display: inline-block;
      margin-right: 6px;
      opacity: 0.9;
    }
    
    .quick-consult {
      margin-top: 30px;
      padding: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      color: white;
    }
    
    .quick-consult h4 {
      font-size: 1.1rem;
      margin: 0 0 15px 0;
      font-weight: 500;
    }
    
    .quick-consult-form {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .quick-dni-input {
      flex: 1;
      padding: 10px 15px;
      border-radius: 50px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      background: rgba(255, 255, 255, 0.1);
      color: white;
      font-size: 1rem;
      outline: none;
      transition: all 0.3s ease;
    }
    
    .quick-dni-input:focus {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.3);
    }
    
    .quick-dni-input::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }
    
    .quick-dni-button {
      padding: 10px 20px;
      background-color: #e13e3e;
      color: white;
      border: none;
      border-radius: 50px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .quick-dni-button:hover {
      background-color: #ee5e58;
      transform: translateY(-3px);
    }
    
    .quick-examples {
      margin-top: 10px;
    }
    
    .quick-examples p {
      margin: 0 0 8px 0;
      opacity: 0.7;
      font-size: 0.9rem;
    }
    
    .example-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
    }
    
    .example-dni {
      background: rgba(255, 255, 255, 0.15);
      border: none;
      color: white;
      padding: 5px 12px;
      border-radius: 50px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .example-dni:hover {
      background: rgba(255, 255, 255, 0.25);
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const resultsSlide = document.querySelector('.results-slide') as HTMLElement;
      const closeButton = document.getElementById('close-results') as HTMLButtonElement;
      const backButton = document.getElementById('back-to-search') as HTMLButtonElement;
      const generateQrButton = document.getElementById('generate-qr') as HTMLButtonElement;
      const qrModal = document.getElementById('qr-modal') as HTMLElement;
      const closeQrModal = document.getElementById('close-qr-modal') as HTMLButtonElement;
      const backFromQrButton = document.getElementById('back-from-qr') as HTMLButtonElement;
      const qrContainer = document.getElementById('qr-container') as HTMLElement;
      
      // Definición de tipos
      interface Examen {
        materia: string;
        fecha: string;
        hora: string;
        aula: string;
        edificio?: string;
        tipo?: string;
        condicion?: string;
        carrera?: string;
      }
      
      interface Estudiante {
        dni: string;
        nombre?: string;
        carrera?: string;
        carreras?: string[];
        modalidad?: string;
        sede?: string;
        examenes: Examen[];
      }
      
      // Variables para almacenar datos actuales
      let currentDni = '';
      let currentEstudiante: Estudiante | null = null;
      
      // Iconos para los detalles de examen
      const iconos = {
        aula: '🏫',
        fecha: '📅',
        hora: '⏰',
        carrera: '🎓',
        condicion: '📋',
        tipo: '🗣️',
        edificio: '🏢',
        modalidad: '📚',
        sede: '📍'
      };
      
      // Función para formatear la fecha (YYYY/MM/DD -> DD/MM/YYYY)
      function formatearFecha(fecha: string): string {
        if (!fecha) return '';
        const partes = fecha.split('/');
        if (partes.length === 3) {
          return `${partes[2]}/${partes[1]}/${partes[0]}`;
        }
        return fecha;
      }
      
      // Función para buscar un estudiante por DNI
      async function buscarEstudiantePorDNI(dni: string): Promise<Estudiante | null> {
        try {
          const response = await fetch('/data.json');
          if (!response.ok) {
            throw new Error('No se pudo cargar el archivo de datos');
          }
          
          const data = await response.json();
          
          // Si el JSON es un único objeto con un DNI
          if (data.dni === dni) {
            return data;
          }
          
          // Si el JSON es un array de estudiantes
          if (Array.isArray(data)) {
            return data.find(estudiante => estudiante.dni === dni) || null;
          }
          
          // Si el JSON tiene una propiedad estudiantes que es un array
          if (data.estudiantes && Array.isArray(data.estudiantes)) {
            return data.estudiantes.find((estudiante: Estudiante) => estudiante.dni === dni) || null;
          }
          
          return null;
        } catch (error) {
          console.error('Error al buscar estudiante:', error);
          return null;
        }
      }
      
      // Función para mostrar la slide de resultados directamente desde el DNI
      window.consultarPorDNI = async (dni: string) => {
        const estudiante = await buscarEstudiantePorDNI(dni);
        
        if (!estudiante) {
          alert('No se encontró información para el DNI proporcionado');
          return;
        }
        
        mostrarResultadosEstudiante(estudiante);
      };
      
      // Función para mostrar la información del estudiante
      function mostrarResultadosEstudiante(estudiante: Estudiante) {
        if (!estudiante || !estudiante.examenes || !resultsSlide) return;
        
        currentDni = estudiante.dni;
        currentEstudiante = estudiante;
        
        // Mostrar el DNI y nombre
        const dniDisplay = document.getElementById('dni-display');
        if (dniDisplay) {
          dniDisplay.innerHTML = `<strong>DNI:</strong> ${estudiante.dni}<br><strong>Nombre:</strong> ${estudiante.nombre || ''}`;
        }
        
        // Mostrar información adicional
        const examsCount = document.getElementById('exams-count');
        if (examsCount) {
          let infoAdicional = '';
          
          // Mostrar carreras (pueden ser múltiples)
          if (estudiante.carreras && estudiante.carreras.length > 0) {
            infoAdicional += `<div class="mb-1"><span class="info-icon">${iconos.carrera}</span> <span class="font-bold">Carreras:</span></div>`;
            estudiante.carreras.forEach((carrera: string) => {
              infoAdicional += `<div class="ml-6 mb-1">• ${carrera}</div>`;
            });
          } else if (estudiante.carrera) {
            infoAdicional += `<div><span class="info-icon">${iconos.carrera}</span> ${estudiante.carrera}</div>`;
          }
          
          if (estudiante.modalidad) {
            infoAdicional += `<div class="mt-1"><span class="info-icon">${iconos.modalidad}</span> ${estudiante.modalidad}</div>`;
          }
          
          if (estudiante.sede) {
            infoAdicional += `<div class="mt-1"><span class="info-icon">${iconos.sede}</span> ${estudiante.sede}</div>`;
          }
          
          infoAdicional += `<div class="mt-3 font-bold">${estudiante.examenes.length} ${estudiante.examenes.length === 1 ? 'examen programado' : 'exámenes programados'}</div>`;
          
          examsCount.innerHTML = infoAdicional;
        }
        
        // Mostrar los exámenes
        const examenesContainer = document.getElementById('examenes-container');
        if (examenesContainer) {
          let tarjetasHTML = '';
          
          estudiante.examenes.forEach((examen: Examen) => {
            tarjetasHTML += `
              <div class="examen-card bg-white bg-opacity-80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                <div class="bg-gradient-to-r from-red-600 to-red-500 p-4 text-white">
                  <h3 class="text-xl font-bold text-center">${examen.materia}</h3>
                  ${examen.carrera ? `<div class="text-sm mt-1 opacity-90 text-center">${iconos.carrera} ${examen.carrera}</div>` : ''}
                </div>
                <div class="p-4 space-y-3">
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.fecha}</span>
                    <span><b>Fecha:</b> ${formatearFecha(examen.fecha)}</span>
                  </div>
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.hora}</span>
                    <span><b>Hora:</b> ${examen.hora}</span>
                  </div>
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.aula}</span>
                    <span><b>Aula:</b> ${examen.aula}</span>
                  </div>
                  ${examen.edificio ? `
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.edificio}</span>
                    <span><b>Edificio:</b> ${examen.edificio}</span>
                  </div>` : ''}
                  ${examen.tipo ? `
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.tipo}</span>
                    <span><b>Tipo:</b> ${examen.tipo}</span>
                  </div>` : ''}
                  ${examen.condicion ? `
                  <div class="flex items-center gap-2 text-gray-700">
                    <span class="text-xl text-red-500">${iconos.condicion}</span>
                    <span><b>Condición:</b> ${examen.condicion}</span>
                  </div>` : ''}
                </div>
              </div>
            `;
          });
          
          examenesContainer.innerHTML = tarjetasHTML;
        }
        
        // Mostrar la slide
        resultsSlide.classList.add('active');
        document.body.style.overflow = 'hidden'; // Prevenir scroll del body
        
        // Ajustar la vista en móviles
        if (window.innerWidth < 768) {
          // Asegurar que el contenido se vea desde arriba
          setTimeout(() => {
            const contentOverlay = document.querySelector('.content-overlay');
            if (contentOverlay) {
              contentOverlay.scrollTop = 0;
            }
          }, 100);
        }
      }
      
      // Mantener la función original para compatibilidad
      window.showResultsSlide = (dni: string, examenes: Array<Examen>) => {
        // Crear un objeto estudiante temporal con los datos recibidos
        const estudianteTmp: Estudiante = {
          dni: dni,
          examenes: examenes
        };
        
        mostrarResultadosEstudiante(estudianteTmp);
      };
      
      // Función para ocultar la slide de resultados
      window.hideResultsSlide = () => {
        if (!resultsSlide) return;
        
        resultsSlide.classList.remove('active');
        document.body.style.overflow = ''; // Restaurar scroll del body
      };
      
      // Función para generar un código QR
      function generateQR() {
        if (!qrContainer || !qrModal) return;
        
        // Preparar los datos para el QR
        const qrData = {
          dni: currentDni,
          estudiante: currentEstudiante,
          fecha_generacion: new Date().toISOString()
        };
        
        // Convertir a string para el QR
        const qrString = JSON.stringify(qrData);
        
        // Limpiar el contenedor de QR
        qrContainer.innerHTML = '';
        
        // Cargar la biblioteca QRCode de forma dinámica si aún no está cargada
        if (typeof window.QRCode === 'undefined') {
          const script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.4.4/build/qrcode.min.js';
          script.onload = () => {
            createQRCode(qrString);
          };
          document.head.appendChild(script);
        } else {
          createQRCode(qrString);
        }
        
        // Mostrar el modal
        qrModal.classList.add('active');
      }
      
      // Función para crear el código QR con la biblioteca
      function createQRCode(data: string) {
        try {
          // @ts-ignore
          new window.QRCode(qrContainer, {
            text: data,
            width: 180,
            height: 180,
            colorDark: '#202c63',
            colorLight: '#ffffff',
            correctLevel: 'H' // Alto nivel de corrección de errores
          });
        } catch (error) {
          console.error('Error al generar el código QR:', error);
          qrContainer.innerHTML = '<p style="color: red;">Error al generar el QR. Inténtelo de nuevo.</p>';
        }
      }
      
      // Event listeners para cerrar la slide
      if (closeButton) {
        closeButton.addEventListener('click', () => {
          window.hideResultsSlide();
        });
      }
      
      if (backButton) {
        backButton.addEventListener('click', () => {
          window.hideResultsSlide();
        });
      }
      
      // Event listener para generar QR
      if (generateQrButton) {
        generateQrButton.addEventListener('click', generateQR);
      }
      
      // Event listeners para el modal de QR
      if (closeQrModal) {
        closeQrModal.addEventListener('click', () => {
          qrModal?.classList.remove('active');
        });
      }
      
      if (backFromQrButton) {
        backFromQrButton.addEventListener('click', () => {
          qrModal?.classList.remove('active');
        });
      }
      
      // Cerrar modal al hacer clic fuera
      if (qrModal) {
        qrModal.addEventListener('click', (e) => {
          if (e.target === qrModal) {
            qrModal.classList.remove('active');
          }
        });
      }
      
      // También cerrar al hacer clic fuera del contenedor
      if (resultsSlide) {
        resultsSlide.addEventListener('click', (e) => {
          if (e.target === resultsSlide) {
            window.hideResultsSlide();
          }
        });
      }
      
      // Asegurar que el modal se ajuste en resize
      window.addEventListener('resize', () => {
        if (resultsSlide && resultsSlide.classList.contains('active')) {
          // Ajustar altura en cambios de orientación
          const contentOverlay = document.querySelector('.content-overlay');
          if (contentOverlay && window.innerHeight < 700) {
            contentOverlay.scrollTop = 0;
          }
        }
      });
      
      // Soporte para tecla ESC para cerrar
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          if (qrModal && qrModal.classList.contains('active')) {
            qrModal?.classList.remove('active');
          } else if (resultsSlide && resultsSlide.classList.contains('active')) {
            window.hideResultsSlide();
          }
        }
      });
    });
    
    // Definir las funciones globales para TypeScript
    declare global {
      interface Window {
        showResultsSlide: (dni: string, examenes: Array<{
          materia: string, 
          aula: string, 
          fecha: string, 
          hora: string, 
          carrera?: string, 
          condicion?: string, 
          tipo?: string,
          edificio?: string
        }>) => void;
        consultarPorDNI: (dni: string) => Promise<void>;
        hideResultsSlide: () => void;
        QRCode: any; // Para la biblioteca de QR
      }
    }
  </script> 